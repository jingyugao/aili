
%{


#include"parser.h"

Node *parse_tree;

extern FILE * stderr;
#define print_node(x,y) 
%}


%union{
int ival;
float fval;
char *sval;
CondOp opval;
Node* n;
}




%token <sval>   WORD 
%token <sval>   LITERAL  
%token <ival>   INT 
%token <fval>   FLOAT 


%token 
    NONE
    CREATE
    DROP
    SET
    JOIN
    ON
    AS
    DATABASE
    TABLE
    INDEX
    HELP
    VALUES
    INSERT
    DELETE
    PRIMARY
    T_INT
    T_FLOAT
    T_VARCHAR
    UPDATE
    INTO
    AND
    OR
    NOT
    EQ
    NE
    LT
    LE
    GT
    GE

%left AND OR JOIN
%nonassoc NOT 


%token SELECT FROM WHERE

%type <opval> op

%type <n>   sql 
            ddl 
            dml
            create_table
            drop_table
            create_db
            drop_db
            insert_statment
            insert_values
            select_statment
            cond_list
            update_statment
            set_list
            set_value
            delete_statment
            attr
            attr_list
            cmp_statment
            cmp_val
            column_list
            sql_value
            rel_list
            where_clause
            table
            table2
            join_table
            base_table
            column
            



%%



start:                  sql   {fprintf(stderr,"start\n");  parse_tree=$1;  } 
                    ;

sql:                    ddl
                    |   dml {fprintf(stderr,"sql\n");   $$=$1;}
                    ;



ddl:                    create_table   
                    |   drop_table
                    |   create_db
                    |   drop_db
                    ;

dml:                    insert_statment
                    |   select_statment
                    |   update_statment
                    |   delete_statment
                    ;

create_table:         CREATE TABLE table  '(' attr_list ')'   {  }      
                    ;

drop_table:          DROP TABLE  table        { fprintf(stderr,"drop\n");}
                    ;

create_db:              CREATE DATABASE WORD        { fprintf(stderr,"create db\n"); }
                    ;

drop_db:              DROP DATABASE WORD  { fprintf(stderr,"drop db\n"); }
                    ;

insert_statment:   
                        INSERT INTO table VALUES '(' insert_values ')'   {fprintf(stderr,"insert\n");}
                    |   INSERT INTO table '(' column_list ')' VALUES '(' insert_values ')'  {fprintf(stderr,"insert\n");}
                    ;
insert_values:   
                        sql_value ',' insert_values    {fprintf(stderr,"insert_values\n");}
                    |   sql_value                      {fprintf(stderr,"insert_values\n");}
                    ;


select_statment:
                        SELECT column_list  FROM rel_list where_clause       {fprintf(stderr,"sel_statment1\n");SelectNode *n=new SelectNode();n->fields=$2;n->tables=$4;n->cond=$5;$$=n;}
                    ;


update_statment:        UPDATE  table SET  set_list where_clause  { }
                    ;
                   
delete_statment:        DELETE FROM table where_clause { }
                    ;

where_clause:           WHERE cond_list          {$$= $2;}
                    |   /* empty */              {$$=NULL;}
                    ;

set_list:               set_value ',' set_list      { }
                    |   set_value                   { }
                    ;

set_value:             column EQ sql_value    { }  
                    ;


cond_list:
                        cond_list AND cond_list  {CondNode *n=new CondNode();n->left=$1;n->right=$3;n->op=OpAnd;$$=n;}
                    |   cond_list OR cond_list   {CondNode*n=new CondNode();n->left=$1;n->right=$3;n->op=OpOr;$$=n;}
                    |   NOT cond_list               {CondNode*n=new CondNode();n->left=$2;n->op=OpNot;$$=n;}
                    |   '(' cond_list ')'           {$$=$2;}
                    |   cmp_statment          
                    ;
            
cmp_statment:
                        cmp_val op cmp_val      {fprintf(stderr,"cmp_statment\n"); CondNode* cond=new CondNode();cond->left=$1;cond->right=cond;cond->op=$2;$$=cond;}
                    ;   

cmp_val:            
                        column                  
                    |   sql_value
                    ;

column_list:
                        column ',' column_list   {fprintf(stderr,"col_list 2\n");$$=$3;((ListNode*)$$)->list.push_back($3);}
                    |   column              {fprintf(stderr,"col_list\n"); $$=new ListNode();((ListNode*)$$)->list.push_back($1);}
                    ;


attr_list:              attr ',' attr_list   {fprintf(stderr,"attr_list\n");$$=$3;((ListNode*)$$)->list.push_back($1);}
                    |   attr               {fprintf(stderr,"attr_list 2\n");ListNode *n=new ListNode();n->list.push_back($1);$$=n;}
                    ;



attr:                   WORD  T_INT                  {fprintf(stderr,"attr\n");AttrNode*attr=new AttrNode();attr->name=$1;attr->valKind=ValInt;$$=attr;}
                    |   WORD  T_FLOAT                {fprintf(stderr,"attr\n");AttrNode*attr=new AttrNode();attr->name=$1;attr->valKind=ValFloat;$$=attr;}
                    |   WORD  T_VARCHAR '(' INT ')'  {fprintf(stderr,"attr\n");AttrNode*attr=new AttrNode();attr->name=$1;attr->valKind=ValStr;attr->len=$4;$$=attr;}
                    ;



sql_value:
                        INT                 {fprintf(stderr,"INT\n");ValueNode*n=new ValueNode();n->i=$1;n->valKind=ValInt;    $$=n;  }
                    |   FLOAT               {fprintf(stderr,"FLOAT\n");ValueNode*n=new ValueNode();n->f=$1;n->valKind=ValFloat;  $$=n;        }
                    |   LITERAL             {fprintf(stderr,"LITERAL\n");ValueNode*n=new ValueNode();n->str=$1;n->valKind=ValStr;$$=n; }
                    ;

rel_list:               table ',' rel_list   {$$=$3;((ListNode*)$$)->list.push_back($1);}
                    |   table              {fprintf(stderr,"rel_list\n"); ListNode *n=new ListNode();n->list.push_back($1);$$=n;}
                    ;


column:                 base_table '.' WORD     {fprintf(stderr,"rel.col:%s.%s\n",$1,$3);
                                           FieldNode *n=new FieldNode();
                                            n->name=$3;n->table=$1;$$=n;}
                    |   WORD               {fprintf(stderr,"column:%s\n",$1);
                                            FieldNode*n=new FieldNode();
                                            n->name=$1;$$=n;} 
                    ;   


table:   table2 AS  WORD {$$=$1;((TableNode*)$$)->alias=$3;  }
        ;

table2:               join_table    {fprintf(stderr,"table2,\n");   TableNode * n=new TableNode();n->join=$1;$$=n;}
                    | base_table 
                    ;                    

base_table:              WORD        {
                                        fprintf(stderr,"table:%s,\n",$1);
                                        TableNode*n=new TableNode();
                                        n->name=$1;
                                        $$=n;
                                        }          
                    ;
join_table:              base_table JOIN base_table ON cond_list {fprintf(stderr,"table:%s-%s,\n",((TableNode*)$1)->name.c_str(),((TableNode*)$3)->name.c_str());   JoinNode *n=new JoinNode();n->left=$1;n->right=$3;n->cond=$5; $$=n;        }
                    ;


op: 
                        EQ      {$$=OpEq;}
                    |   LT      {$$=OpLt;}
                    |   GT      {$$=OpGt;}
                    |   LE      {$$=OpLe;}
                    |   GE      {$$=OpGe;}
                    |   NE      {$$=OpNe;}
                    ;
        
%%

